{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "61851030",
   "metadata": {
    "papermill": {
     "duration": 0.004425,
     "end_time": "2025-07-28T21:26:30.705523",
     "exception": false,
     "start_time": "2025-07-28T21:26:30.701098",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Logistic Regression\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f4bc7c0a",
   "metadata": {
    "papermill": {
     "duration": 0.002458,
     "end_time": "2025-07-28T21:26:30.711865",
     "exception": false,
     "start_time": "2025-07-28T21:26:30.709407",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Logistic Regression uses a loss function more suited to the task of categorization where the target is 0 or 1 rather than any number. \n",
    "\n",
    ">**Definition Note:**   In this course, these definitions are used:  \n",
    "**Loss** is a measure of the difference of a single example to its target value while the  \n",
    "**Cost** is a measure of the losses over the training set\n",
    "\n",
    "\n",
    "This is defined: \n",
    "* $loss(f_{\\mathbf{w},b}(\\mathbf{x}^{(i)}), y^{(i)})$ is the cost for a single data point, which is:\n",
    "\n",
    "\\begin{equation}\n",
    "  loss(f_{\\mathbf{w},b}(\\mathbf{x}^{(i)}), y^{(i)}) = \\begin{cases}\n",
    "    - \\log\\left(f_{\\mathbf{w},b}\\left( \\mathbf{x}^{(i)} \\right) \\right) & \\text{if $y^{(i)}=1$}\\\\\n",
    "    - \\log \\left( 1 - f_{\\mathbf{w},b}\\left( \\mathbf{x}^{(i)} \\right) \\right) & \\text{if $y^{(i)}=0$}\n",
    "  \\end{cases}\n",
    "\\end{equation}\n",
    "\n",
    "\n",
    "*  $f_{\\mathbf{w},b}(\\mathbf{x}^{(i)})$ is the model's prediction, while $y^{(i)}$ is the target value.\n",
    "\n",
    "*  $f_{\\mathbf{w},b}(\\mathbf{x}^{(i)}) = g(\\mathbf{w} \\cdot\\mathbf{x}^{(i)}+b)$ where function $g$ is the sigmoid function.\n",
    "* Notational convention: `log` means the natural logarithm. \n",
    "\n",
    "The defining feature of this loss function is the fact that it uses two separate curves. One for the case when the target is zero or ($y=0$) and another for when the target is one ($y=1$). Combined, these curves provide the behavior useful for a loss function, namely, being zero when the prediction matches the target and rapidly increasing in value as the prediction differs from the target. Consider the curves below:"
   ]
  },
  {
   "attachments": {
    "a749e7cd-c2e9-442b-9565-a1c5835c18a0.png": {
     "image/png": ""
    }
   },
   "cell_type": "markdown",
   "id": "a42c28a1",
   "metadata": {
    "papermill": {
     "duration": 0.002324,
     "end_time": "2025-07-28T21:26:30.716836",
     "exception": false,
     "start_time": "2025-07-28T21:26:30.714512",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "![image.png](attachment:a749e7cd-c2e9-442b-9565-a1c5835c18a0.png)\n",
    "\n",
    "Combined, the curves are similar to the quadratic curve of the squared error loss. Note, the x-axis is  𝑓𝐰,𝑏\n",
    "  which is the output of a sigmoid. The sigmoid output is strictly between 0 and 1.\n",
    "  "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d602a491",
   "metadata": {
    "papermill": {
     "duration": 0.002388,
     "end_time": "2025-07-28T21:26:30.721713",
     "exception": false,
     "start_time": "2025-07-28T21:26:30.719325",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "The loss function above can be rewritten to be easier to implement.\n",
    "    $$loss(f_{\\mathbf{w},b}(\\mathbf{x}^{(i)}), y^{(i)}) = (-y^{(i)} \\log\\left(f_{\\mathbf{w},b}\\left( \\mathbf{x}^{(i)} \\right) \\right) - \\left( 1 - y^{(i)}\\right) \\log \\left( 1 - f_{\\mathbf{w},b}\\left( \\mathbf{x}^{(i)} \\right) \\right)$$\n",
    "  \n",
    "This is a rather formidable-looking equation. It is less daunting when you consider $y^{(i)}$ can have only two values, 0 and 1. One can then consider the equation in two pieces:  \n",
    "when $ y^{(i)} = 0$, the left-hand term is eliminated:\n",
    "$$\n",
    "\\begin{align}\n",
    "loss(f_{\\mathbf{w},b}(\\mathbf{x}^{(i)}), 0) &= (-(0) \\log\\left(f_{\\mathbf{w},b}\\left( \\mathbf{x}^{(i)} \\right) \\right) - \\left( 1 - 0\\right) \\log \\left( 1 - f_{\\mathbf{w},b}\\left( \\mathbf{x}^{(i)} \\right) \\right) \\\\\n",
    "&= -\\log \\left( 1 - f_{\\mathbf{w},b}\\left( \\mathbf{x}^{(i)} \\right) \\right)\n",
    "\\end{align}\n",
    "$$\n",
    "and when $ y^{(i)} = 1$, the right-hand term is eliminated:\n",
    "$$\n",
    "\\begin{align}\n",
    "  loss(f_{\\mathbf{w},b}(\\mathbf{x}^{(i)}), 1) &=  (-(1) \\log\\left(f_{\\mathbf{w},b}\\left( \\mathbf{x}^{(i)} \\right) \\right) - \\left( 1 - 1\\right) \\log \\left( 1 - f_{\\mathbf{w},b}\\left( \\mathbf{x}^{(i)} \\right) \\right)\\\\\n",
    "  &=  -\\log\\left(f_{\\mathbf{w},b}\\left( \\mathbf{x}^{(i)} \\right) \\right)\n",
    "\\end{align}\n",
    "$$\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "a19d1426",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-28T21:26:30.728599Z",
     "iopub.status.busy": "2025-07-28T21:26:30.728247Z",
     "iopub.status.idle": "2025-07-28T21:26:30.739658Z",
     "shell.execute_reply": "2025-07-28T21:26:30.738712Z"
    },
    "papermill": {
     "duration": 0.016908,
     "end_time": "2025-07-28T21:26:30.741264",
     "exception": false,
     "start_time": "2025-07-28T21:26:30.724356",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import math"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "80c62724",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-28T21:26:30.748933Z",
     "iopub.status.busy": "2025-07-28T21:26:30.747767Z",
     "iopub.status.idle": "2025-07-28T21:26:30.753800Z",
     "shell.execute_reply": "2025-07-28T21:26:30.752696Z"
    },
    "papermill": {
     "duration": 0.011018,
     "end_time": "2025-07-28T21:26:30.755147",
     "exception": false,
     "start_time": "2025-07-28T21:26:30.744129",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "X_train = np.array([[0.5, 1.5], [1,1], [1.5, 0.5], [3, 0.5], [2, 2], [1, 2.5]])  #(m --> samples ,n --> # of features)\n",
    "y_train = np.array([0, 0, 0, 1, 1, 1])   "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "3811ef48",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-28T21:26:30.762223Z",
     "iopub.status.busy": "2025-07-28T21:26:30.761956Z",
     "iopub.status.idle": "2025-07-28T21:26:30.767460Z",
     "shell.execute_reply": "2025-07-28T21:26:30.766070Z"
    },
    "papermill": {
     "duration": 0.011357,
     "end_time": "2025-07-28T21:26:30.769362",
     "exception": false,
     "start_time": "2025-07-28T21:26:30.758005",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def sigmoid(x):\n",
    "    exp_neg_x = math.exp(-x)\n",
    "    denominator = 1 + exp_neg_x\n",
    "    result = 1 / denominator\n",
    "    return result"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "51de200d",
   "metadata": {
    "papermill": {
     "duration": 0.002238,
     "end_time": "2025-07-28T21:26:30.774401",
     "exception": false,
     "start_time": "2025-07-28T21:26:30.772163",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Cost function\n",
    "\n",
    "The Cost function for the Logistic Regression for all training samples is : \n",
    "\n",
    "\n",
    "$$ J(\\mathbf{w},b) = \\frac{1}{m} \\sum_{i=0}^{m-1} \\left[ loss(f_{\\mathbf{w},b}(\\mathbf{x}^{(i)}), y^{(i)}) \\right] \\tag{1}$$\n",
    "\n",
    "where\n",
    "* $loss(f_{\\mathbf{w},b}(\\mathbf{x}^{(i)}), y^{(i)})$ is the cost for a single data point, which is:\n",
    "\n",
    "    $$loss(f_{\\mathbf{w},b}(\\mathbf{x}^{(i)}), y^{(i)}) = -y^{(i)} \\log\\left(f_{\\mathbf{w},b}\\left( \\mathbf{x}^{(i)} \\right) \\right) - \\left( 1 - y^{(i)}\\right) \\log \\left( 1 - f_{\\mathbf{w},b}\\left( \\mathbf{x}^{(i)} \\right) \\right) \\tag{2}$$\n",
    "    \n",
    "*  where m is the number of training examples in the data set and:\n",
    "$$\n",
    "\\begin{align}\n",
    "  f_{\\mathbf{w},b}(\\mathbf{x^{(i)}}) &= g(z^{(i)})\\tag{3} \\\\\n",
    "  z^{(i)} &= \\mathbf{w} \\cdot \\mathbf{x}^{(i)}+ b\\tag{4} \\\\\n",
    "  g(z^{(i)}) &= \\frac{1}{1+e^{-z^{(i)}}}\\tag{5} \n",
    "\\end{align}\n",
    "$$\n",
    " "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "aeb8d4f4",
   "metadata": {
    "papermill": {
     "duration": 0.00213,
     "end_time": "2025-07-28T21:26:30.778828",
     "exception": false,
     "start_time": "2025-07-28T21:26:30.776698",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "<a name='ex-02'></a>\n",
    "#### Code Description\n",
    "\n",
    "The algorithm for `compute_cost_logistic` loops over all the examples calculating the loss for each example and accumulating the total.\n",
    "\n",
    "Note that the variables X and y are not scalar values but matrices of shape ($m, n$) and ($𝑚$,) respectively, where  $𝑛$ is the number of features and $𝑚$ is the number of training examples.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "79c74930",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-28T21:26:30.786336Z",
     "iopub.status.busy": "2025-07-28T21:26:30.785988Z",
     "iopub.status.idle": "2025-07-28T21:26:30.791914Z",
     "shell.execute_reply": "2025-07-28T21:26:30.790660Z"
    },
    "papermill": {
     "duration": 0.011586,
     "end_time": "2025-07-28T21:26:30.793663",
     "exception": false,
     "start_time": "2025-07-28T21:26:30.782077",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def compute_cost_logistic(X, y, w, b):\n",
    "    \n",
    "    m = X.shape[0]\n",
    "    cost = 0.0\n",
    "    \n",
    "    for i in range(m):\n",
    "        z_i = np.dot(w,X[i]) + b\n",
    "        f_wb_i = sigmoid(z_i)\n",
    "        cost += -y[i]*np.log(f_wb_i) - (1-y[i])*np.log(1-f_wb_i)\n",
    "    cost = cost / m\n",
    "    \n",
    "    return cost\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "81c19e91",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-28T21:26:30.800696Z",
     "iopub.status.busy": "2025-07-28T21:26:30.800366Z",
     "iopub.status.idle": "2025-07-28T21:26:30.810128Z",
     "shell.execute_reply": "2025-07-28T21:26:30.808934Z"
    },
    "papermill": {
     "duration": 0.014883,
     "end_time": "2025-07-28T21:26:30.811688",
     "exception": false,
     "start_time": "2025-07-28T21:26:30.796805",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.36686678640551745\n"
     ]
    }
   ],
   "source": [
    "w_tmp = np.array([1,1])\n",
    "b_tmp = -3\n",
    "print(compute_cost_logistic(X_train, y_train, w_tmp, b_tmp))"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [],
   "dockerImageVersionId": 31089,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 5.406473,
   "end_time": "2025-07-28T21:26:31.233724",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-07-28T21:26:25.827251",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
