{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[],"dockerImageVersionId":31089,"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"# Cost Function in Machine Learning:\n\n## What is a Cost Function?\n\nA **cost function** (or loss function) in machine learning is a mathematical formula that measures how well a model's predictions match actual data. It outputs a single number representing the total prediction error.\n\n## Why is it Important?\n\n- **Performance Metric:** Quantifies prediction errors.\n- **Optimization Tool:** Algorithms adjust model parameters to minimize the cost.\n- **Guides Learning:** Models use this feedback to improve.\n\n## Common Types of Cost Functions\n\n| Task Type        | Cost Function        | Formula                                                              | Description                                                       |\n|------------------|---------------------|----------------------------------------------------------------------|-------------------------------------------------------------------|\n| Regression       | Mean Squared Error (MSE) | \\( MSE = \\frac{1}{n} \\sum_{i=1}^{n} (y_i – \\hat{y}_i)^2 \\)           | Average of squared prediction errors                              |\n| Regression       | Mean Absolute Error (MAE) | \\( MAE = \\frac{1}{n} \\sum_{i=1}^{n} |y_i – \\hat{y}_i| \\)            | Average of absolute prediction errors                             |\n| Classification   | Cross-Entropy Loss / Log Loss | \\( -\\sum_{i=1}^{n} y_i \\log(\\hat{y}_i) \\)                           | Measures difference between actual labels and predicted probs     |\n| Classification   | Hinge Loss          | \\( \\sum_{i=1}^n \\max(0, 1 - y_i \\cdot \\hat{y}_i) \\)                  | Used for support vector machines                                  |\n\n## How is it Used?\n\n- The training process finds model parameters (e.g., weights) that **minimize the cost function**.\n- Algorithms (like gradient descent) use the cost to adjust model parameters toward better predictions.\n\n","metadata":{}},{"cell_type":"markdown","source":"## Problem Statement\n\nYou would like a model which can predict housing prices given the size of the house.  \nLet's use the same two data points as before the previous lab- a house with 1000 square feet sold for \\\\$300,000 and a house with 2000 square feet sold for \\\\$500,000.\n\n\n| Size (1000 sqft)     | Price (1000s of dollars) |\n| -------------------| ------------------------ |\n| 1                 | 300                      |\n| 2                  | 500                      |","metadata":{}},{"cell_type":"code","source":"import numpy as np\nimport matplotlib.pyplot as plt","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-15T20:07:21.704270Z","iopub.execute_input":"2025-07-15T20:07:21.704530Z","iopub.status.idle":"2025-07-15T20:07:21.709060Z","shell.execute_reply.started":"2025-07-15T20:07:21.704512Z","shell.execute_reply":"2025-07-15T20:07:21.707989Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"x_train = np.array([1.0, 2.0])           #(size in 1000 square feet)\ny_train = np.array([300.0, 500.0])           #(price in 1000s of dollars)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-15T20:07:22.525135Z","iopub.execute_input":"2025-07-15T20:07:22.525411Z","iopub.status.idle":"2025-07-15T20:07:22.530137Z","shell.execute_reply.started":"2025-07-15T20:07:22.525391Z","shell.execute_reply":"2025-07-15T20:07:22.529097Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## Computing Cost\nThe term 'cost' in this assignment might be a little confusing since the data is housing cost. Here, cost is a measure how well our model is predicting the target price of the house. The term 'price' is used for housing data.\n\nThe equation for cost with one variable is:\n  $$J(w,b) = \\frac{1}{2m} \\sum\\limits_{i = 0}^{m-1} (f_{w,b}(x^{(i)}) - y^{(i)})^2 \\tag{1}$$ \n \nwhere \n  $$f_{w,b}(x^{(i)}) = wx^{(i)} + b \\tag{2}$$\n  \n- $f_{w,b}(x^{(i)})$ is our prediction for example $i$ using parameters $w,b$.  \n- $(f_{w,b}(x^{(i)}) -y^{(i)})^2$ is the squared difference between the target value and the prediction.   \n- These differences are summed over all the $m$ examples and divided by `2m` to produce the cost, $J(w,b)$.  \n\n","metadata":{}},{"cell_type":"code","source":"def compute_cost(x,y,w,b):\n    m = x.shape[0]\n    sum_cost = 0\n    for i in range(m) :\n        f_wb = w * x[i] + b \n        cost = (f_wb - y[i]) ** 2 \n        sum_cost = sum_cost + cost \n    total_cost = ((1/(2 * m)) * sum_cost) \n    return total_cost \n        ","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-15T20:07:22.910137Z","iopub.execute_input":"2025-07-15T20:07:22.910408Z","iopub.status.idle":"2025-07-15T20:07:22.915561Z","shell.execute_reply.started":"2025-07-15T20:07:22.910389Z","shell.execute_reply":"2025-07-15T20:07:22.914653Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"w_values = np.linspace(0, 400, 100)\nb = 0\ncost_values = [compute_cost(x_train, y_train, w, b) for w in w_values]\n\nplt.plot(w_values, cost_values, label='Cost Function')\n\nw_point = 150\ncost_point = compute_cost(x_train, y_train, w_point, b)\n\nplt.scatter(w_point, cost_point, color='red', s=100, label=f'Cost at w={w_point}')\n\nplt.xlabel(\"Weight (w)\")\nplt.ylabel(\"Cost\")\nplt.title(\"Cost Function vs Weight (w)\")\nplt.grid(True)\nplt.legend()\nplt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-15T20:24:58.839572Z","iopub.execute_input":"2025-07-15T20:24:58.840265Z","iopub.status.idle":"2025-07-15T20:24:59.060119Z","shell.execute_reply.started":"2025-07-15T20:24:58.840234Z","shell.execute_reply":"2025-07-15T20:24:59.059258Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":" <figcaption>\n    As illustrated here, the red dot represents the error at its corresponding weight value. As the cost decreases, the red dot moves closer to the minimum point on the curve, indicating the model approaches the minimum possible error.\n  </figcaption>","metadata":{}},{"cell_type":"markdown","source":"### Your goal is to find a model $f_{w,b}(x) = wx + b$, with parameters $w,b$,  which will accurately predict house values given an input $x$. The cost is a measure of how accurate the model is on the training data.\n\n### The cost equation (1) above shows that if $w$ and $b$ can be selected such that the predictions $f_{w,b}(x)$ match the target data $y$, the $(f_{w,b}(x^{(i)}) - y^{(i)})^2 $ term will be zero and the cost minimized. In this simple two point example, you can achieve this!\n\n","metadata":{}}]}